<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE softpkg PUBLIC "-//JTRS//DTD SCA V2.2.2 SPD//EN" "softpkg.dtd">
<!--
This file is protected by Copyright. Please refer to the COPYRIGHT file distributed with this
source distribution.

This file is part of REDHAWK Basic Components fastfilter.

REDHAWK Basic Components fastfilter is free software: you can redistribute it and/or modify it under the terms of
the GNU General Public License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.

REDHAWK Basic Components fastfilter is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this
program.  If not, see http://www.gnu.org/licenses/.
-->
<softpkg id="DCE:c6ee0524-16d3-11e5-9155-3417ebc4aab5" name="rh.fastfilter" type="2.0.0" version="2.0.2">
  <title></title>
  <author>
    <name>REDHAWK</name>
  </author>
  <description>fastfilter is an FIR filter implementation using the FFT-based overlap-add technique.

There are three use cases for this component depending upon how it is configured:
1.  Component configured via property &quot;realFilterCoefficients&quot; or &quot;complexFilterCoefficients&quot; with &quot;correlationMode&quot; set to false.  This provides filtering via the typical convolution algorthim using the filter coefficients provided.
2.  Component configured via property &quot;realFilterCoefficients&quot; or &quot;complexFilterCoefficients&quot; with &quot;correlationMode&quot; set to true.  This time correlates against the coeficients provided by reversing the coeficients and filtering.
3.    Component configured via &quot;filterProps&quot;.  This clears the properties &quot;complexFilterCoefficients&quot; and &quot;realFilterCoefficients&quot;.  The component proceedes to design a set of filter coeficients acording to the values of &quot;filterProps&quot;.  In addition &quot;doCorrelation&quot; is set to false since it doesn't make sense to perform correlation with taps produced via coeficient specification.

It is important to note that use cases 1 &amp; 2 use the same filter coeficients regardless of sample rate.  Use case 3 designs a seperate filter for each streamID depending upon its sample rate.</description>
  <propertyfile type="PRF">
    <localfile name="fastfilter.prf.xml"/>
  </propertyfile>
  <descriptor>
    <localfile name="fastfilter.scd.xml"/>
  </descriptor>
  <implementation id="cpp">
    <description>C++ implementation</description>
    <code type="Executable">
      <localfile name="cpp/fastfilter"/>
      <entrypoint>cpp/fastfilter</entrypoint>
    </code>
    <compiler name="/usr/bin/gcc" version="4.1.2"/>
    <programminglanguage name="C++"/>
    <humanlanguage name="EN"/>
    <os name="Linux"/>
    <processor name="x86"/>
    <processor name="x86_64"/>
    <dependency type="runtime_requirements">
      <softpkgref>
        <localfile name="/deps/rh/dsp/dsp.spd.xml"/>
        <implref refid="cpp"/>
      </softpkgref>
    </dependency>
    <dependency type="runtime_requirements">
      <softpkgref>
        <localfile name="/deps/rh/fftlib/fftlib.spd.xml"/>
        <implref refid="cpp"/>
      </softpkgref>
    </dependency>
  </implementation>
</softpkg>
